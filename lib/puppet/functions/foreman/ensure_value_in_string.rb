# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----

# ---- original file header ----
#
# @summary
#   Returns an string with appended values to the end if they were not present in original string.
#
#Prototype:
#
#    ensure_value_in_string(string, array, separator = ',')
#
#Where string is the original string, array is array of additional values to append,
#separator is optional specifying delimiter and defaults to a comma.
#
#For example:
#
#  Given the following statements:
#
#    ensure_value_in_string('one,two', ['two', 'three'])
#
#  The result will be as follows:
#
#    'one,two,three'
#
#  You can specify you own separator as a third argument
#
#     ensure_value_in_string('one,two', ['two', 'three'], ', ')
#
#  results in
#
#    'one,two, three'
#
#
Puppet::Functions.create_function(:'foreman::ensure_value_in_string') do
  # @param arguments
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :arguments
  end


  def default_impl(*arguments)
    
    #
    # This is to ensure that whenever we call this function from within
    # the Puppet manifest or alternatively form a template it will always
    # do the right thing ...
    #
    arguments = arguments.shift if arguments.first.is_a?(Array)

    raise Puppet::ParseError, "ensure_value_in_string(): Wrong number of arguments " +
        "given (#{arguments.size} for 2..3)" if arguments.size < 2 or arguments.size > 3

    string = arguments.shift
    raise Puppet::ParseError, "ensure_value_in_string(): First argument is not string but #{string.class.to_s}" unless string.is_a?(String)

    adding = arguments.shift
    raise Puppet::ParseError, "ensure_value_in_string(): Second argument is not array but #{adding.class.to_s}" unless adding.is_a?(Array)

    separator = arguments.shift || ','

    existing = string.split(separator.strip).map(&:strip)
    to_add = adding - existing

    ([ string.empty? ? nil : string ] + to_add).compact.join(separator)
  
  end
end
